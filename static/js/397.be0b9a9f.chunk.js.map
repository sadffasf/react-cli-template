{"version":3,"file":"static/js/397.be0b9a9f.chunk.js","mappings":"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","sources":["webpack://my-react-template/./src/page/cat/index.module.scss?0d02","webpack://my-react-template/./src/component/JustifyLayout/index.module.css?d8d4","component/JustifyLayout/index.js","page/cat/store.js","page/cat/index.js","service/fetch.js","../node_modules/justified-layout/lib/index.js","../node_modules/justified-layout/lib/row.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"others\":\"cat_others__JXJcm\",\"cat-page\":\"cat_cat-page__6P6yy\"};","// extracted by mini-css-extract-plugin\nexport default {\"layout-justify-box\":\"JustifyLayout_layout-justify-box__csiTm\",\"layout-justify-img-box\":\"JustifyLayout_layout-justify-img-box__TvKaL\"};","import React, { useRef, useEffect, useState } from \"react\";\nimport styles from \"./index.module.css\";\nimport justifiedLayout from \"justified-layout\";\nconst JustifyLayout = ({ data = [], render = null }) => {\n  const boxRef = useRef(null);\n  const [layoutData, seLayoutData] = useState([]);\n  useEffect(() => {\n    if (data.length == 0) return;\n\n    const containerWidth = boxRef.current.parentElement.clientWidth - 18;\n    seLayoutData(\n      justifiedLayout(\n        data.map((item) => {\n          return item.width / item.height;\n        }),\n        {\n          containerPadding: 10,\n          targetRowHeight: 160,\n          containerWidth: containerWidth,\n        }\n      ).boxes\n    );\n  }, [data]);\n\n  return (\n    <div ref={boxRef} className={styles[\"layout-justify-box\"]}>\n      {layoutData.map((item, index) => {\n        const style = {\n          width: item.width + \"px\",\n          height: item.height + \"px\",\n          left: item.left + \"px\",\n          top: item.top + \"px\",\n        };\n\n        return (\n          <div\n            className={styles[\"layout-justify-img-box\"]}\n            key={index}\n            style={style}\n          >\n            {render(Object.assign(data[index], { layoutData: item }), index)}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default JustifyLayout;\n","import { observable, action, makeObservable } from \"mobx\";\nimport myFetch from \"src/service/fetch\";\nclass Store {\n  constructor() {\n    makeObservable(this);\n    this.getCatPhotos();\n  }\n\n  @observable dataList = [];\n  @action getList() {\n    return myFetch(\"https://api.thecatapi.com/v1/images/search?limit=30\");\n  }\n  @action getCatPhotos() {\n    this.getList().then((res) => {\n      this.dataList = res;\n    });\n  }\n}\nexport default new Store();\n","import React, { useEffect } from \"react\";\nimport styles from \"./index.module.scss\";\nimport { Image } from \"antd\";\nimport JustifyLayout from \"src/component/JustifyLayout\";\nimport store from \"./store\";\nimport { observer, useLocalObservable } from \"mobx-react\";\n\nconst Cats = () => {\n  const curStore = useLocalObservable(() => store);\n  return (\n    <div className={styles[\"cat-page\"]}>\n      <div>\n        <button\n          className={`graybtn ${styles.others}`}\n          onClick={() => {\n            curStore.getCatPhotos();\n          }}\n        >\n          换一批\n        </button>\n      </div>\n\n      <div id=\"catContainer\" style={{ flex: \"1\" }}>\n        <JustifyLayout\n          data={curStore.dataList}\n          render={(item, index) => {\n            return (\n              <Image\n                key={index}\n                src={item.url}\n                data-src={item.url}\n                preview={true}\n                className=\"lazyload\"\n                placeholder={\n                  <div\n                    style={{\n                      width: \"100%\",\n                      height: \"100%\",\n                      background: \"#ddd\",\n                    }}\n                  ></div>\n                }\n                width=\"100%\"\n                height=\"100%\"\n                alt=\"\"\n              />\n            );\n          }}\n        ></JustifyLayout>\n      </div>\n    </div>\n  );\n};\n\nexport default observer(Cats);\n","\r\nconst myFetch =(url,config)=>{\r\n   return  fetch(url,Object.assign({method:'get'},config)).then(res=> res.json());\r\n}\r\nexport default myFetch\r\n","/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n * @license\n */\n\n'use strict';\n\nvar Row = require('./row');\n\n/**\n * Create a new, empty row.\n *\n * @method createNewRow\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @return A new, empty row of the type specified by this layout.\n */\n\nfunction createNewRow(layoutConfig, layoutData) {\n\n\tvar isBreakoutRow;\n\n\t// Work out if this is a full width breakout row\n\tif (layoutConfig.fullWidthBreakoutRowCadence !== false) {\n\t\tif (((layoutData._rows.length + 1) % layoutConfig.fullWidthBreakoutRowCadence) === 0) {\n\t\t\tisBreakoutRow = true;\n\t\t}\n\t}\n\n\treturn new Row({\n\t\ttop: layoutData._containerHeight,\n\t\tleft: layoutConfig.containerPadding.left,\n\t\twidth: layoutConfig.containerWidth - layoutConfig.containerPadding.left - layoutConfig.containerPadding.right,\n\t\tspacing: layoutConfig.boxSpacing.horizontal,\n\t\ttargetRowHeight: layoutConfig.targetRowHeight,\n\t\ttargetRowHeightTolerance: layoutConfig.targetRowHeightTolerance,\n\t\tedgeCaseMinRowHeight: 0.5 * layoutConfig.targetRowHeight,\n\t\tedgeCaseMaxRowHeight: 2 * layoutConfig.targetRowHeight,\n\t\trightToLeft: false,\n\t\tisBreakoutRow: isBreakoutRow,\n\t\twidowLayoutStyle: layoutConfig.widowLayoutStyle\n\t});\n}\n\n/**\n * Add a completed row to the layout.\n * Note: the row must have already been completed.\n *\n * @method addRow\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @param row {Row} The row to add.\n * @return {Array} Each item added to the row.\n */\n\nfunction addRow(layoutConfig, layoutData, row) {\n\n\tlayoutData._rows.push(row);\n\tlayoutData._layoutItems = layoutData._layoutItems.concat(row.getItems());\n\n\t// Increment the container height\n\tlayoutData._containerHeight += row.height + layoutConfig.boxSpacing.vertical;\n\n\treturn row.items;\n}\n\n/**\n * Calculate the current layout for all items in the list that require layout.\n * \"Layout\" means geometry: position within container and size\n *\n * @method computeLayout\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @param itemLayoutData {Array} Array of items to lay out, with data required to lay out each item\n * @return {Object} The newly-calculated layout, containing the new container height, and lists of layout items\n */\n\nfunction computeLayout(layoutConfig, layoutData, itemLayoutData) {\n\n\tvar laidOutItems = [],\n\t\titemAdded,\n\t\tcurrentRow,\n\t\tnextToLastRowHeight;\n\n\t// Apply forced aspect ratio if specified, and set a flag.\n\tif (layoutConfig.forceAspectRatio) {\n\t\titemLayoutData.forEach(function (itemData) {\n\t\t\titemData.forcedAspectRatio = true;\n\t\t\titemData.aspectRatio = layoutConfig.forceAspectRatio;\n\t\t});\n\t}\n\n\t// Loop through the items\n\titemLayoutData.some(function (itemData, i) {\n\n\t\tif (isNaN(itemData.aspectRatio)) {\n\t\t\tthrow new Error(\"Item \" + i + \" has an invalid aspect ratio\");\n\t\t}\n\n\t\t// If not currently building up a row, make a new one.\n\t\tif (!currentRow) {\n\t\t\tcurrentRow = createNewRow(layoutConfig, layoutData);\n\t\t}\n\n\t\t// Attempt to add item to the current row.\n\t\titemAdded = currentRow.addItem(itemData);\n\n\t\tif (currentRow.isLayoutComplete()) {\n\n\t\t\t// Row is filled; add it and start a new one\n\t\t\tlaidOutItems = laidOutItems.concat(addRow(layoutConfig, layoutData, currentRow));\n\n\t\t\tif (layoutData._rows.length >= layoutConfig.maxNumRows) {\n\t\t\t\tcurrentRow = null;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tcurrentRow = createNewRow(layoutConfig, layoutData);\n\n\t\t\t// Item was rejected; add it to its own row\n\t\t\tif (!itemAdded) {\n\n\t\t\t\titemAdded = currentRow.addItem(itemData);\n\n\t\t\t\tif (currentRow.isLayoutComplete()) {\n\n\t\t\t\t\t// If the rejected item fills a row on its own, add the row and start another new one\n\t\t\t\t\tlaidOutItems = laidOutItems.concat(addRow(layoutConfig, layoutData, currentRow));\n\t\t\t\t\tif (layoutData._rows.length >= layoutConfig.maxNumRows) {\n\t\t\t\t\t\tcurrentRow = null;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcurrentRow = createNewRow(layoutConfig, layoutData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\t// Handle any leftover content (orphans) depending on where they lie\n\t// in this layout update, and in the total content set.\n\tif (currentRow && currentRow.getItems().length && layoutConfig.showWidows) {\n\n\t\t// Last page of all content or orphan suppression is suppressed; lay out orphans.\n\t\tif (layoutData._rows.length) {\n\n\t\t\t// Only Match previous row's height if it exists and it isn't a breakout row\n\t\t\tif (layoutData._rows[layoutData._rows.length - 1].isBreakoutRow) {\n\t\t\t\tnextToLastRowHeight = layoutData._rows[layoutData._rows.length - 1].targetRowHeight;\n\t\t\t} else {\n\t\t\t\tnextToLastRowHeight = layoutData._rows[layoutData._rows.length - 1].height;\n\t\t\t}\n\n\t\t\tcurrentRow.forceComplete(false, nextToLastRowHeight);\n\n\t\t} else {\n\n\t\t\t// ...else use target height if there is no other row height to reference.\n\t\t\tcurrentRow.forceComplete(false);\n\n\t\t}\n\n\t\tlaidOutItems = laidOutItems.concat(addRow(layoutConfig, layoutData, currentRow));\n\t\tlayoutConfig._widowCount = currentRow.getItems().length;\n\n\t}\n\n\t// We need to clean up the bottom container padding\n\t// First remove the height added for box spacing\n\tlayoutData._containerHeight = layoutData._containerHeight - layoutConfig.boxSpacing.vertical;\n\t// Then add our bottom container padding\n\tlayoutData._containerHeight = layoutData._containerHeight + layoutConfig.containerPadding.bottom;\n\n\treturn {\n\t\tcontainerHeight: layoutData._containerHeight,\n\t\twidowCount: layoutConfig._widowCount,\n\t\tboxes: layoutData._layoutItems\n\t};\n\n}\n\n/**\n * Takes in a bunch of box data and config. Returns\n * geometry to lay them out in a justified view.\n *\n * @method covertSizesToAspectRatios\n * @param sizes {Array} Array of objects with widths and heights\n * @return {Array} A list of aspect ratios\n */\n\nmodule.exports = function (input, config) {\n\tvar layoutConfig = {};\n\tvar layoutData = {};\n\n\t// Defaults\n\tvar defaults = {\n\t\tcontainerWidth: 1060,\n\t\tcontainerPadding: 10,\n\t\tboxSpacing: 10,\n\t\ttargetRowHeight: 320,\n\t\ttargetRowHeightTolerance: 0.25,\n\t\tmaxNumRows: Number.POSITIVE_INFINITY,\n\t\tforceAspectRatio: false,\n\t\tshowWidows: true,\n\t\tfullWidthBreakoutRowCadence: false,\n\t\twidowLayoutStyle: 'left'\n\t};\n\n\tvar containerPadding = {};\n\tvar boxSpacing = {};\n\n\tconfig = config || {};\n\n\t// Merge defaults and config passed in\n\tlayoutConfig = Object.assign(defaults, config);\n\n\t// Sort out padding and spacing values\n\tcontainerPadding.top = (!isNaN(parseFloat(layoutConfig.containerPadding.top))) ? layoutConfig.containerPadding.top : layoutConfig.containerPadding;\n\tcontainerPadding.right = (!isNaN(parseFloat(layoutConfig.containerPadding.right))) ? layoutConfig.containerPadding.right : layoutConfig.containerPadding;\n\tcontainerPadding.bottom = (!isNaN(parseFloat(layoutConfig.containerPadding.bottom))) ? layoutConfig.containerPadding.bottom : layoutConfig.containerPadding;\n\tcontainerPadding.left = (!isNaN(parseFloat(layoutConfig.containerPadding.left))) ? layoutConfig.containerPadding.left : layoutConfig.containerPadding;\n\tboxSpacing.horizontal = (!isNaN(parseFloat(layoutConfig.boxSpacing.horizontal))) ? layoutConfig.boxSpacing.horizontal : layoutConfig.boxSpacing;\n\tboxSpacing.vertical = (!isNaN(parseFloat(layoutConfig.boxSpacing.vertical))) ? layoutConfig.boxSpacing.vertical : layoutConfig.boxSpacing;\n\n\tlayoutConfig.containerPadding = containerPadding;\n\tlayoutConfig.boxSpacing = boxSpacing;\n\n\t// Local\n\tlayoutData._layoutItems = [];\n\tlayoutData._awakeItems = [];\n\tlayoutData._inViewportItems = [];\n\tlayoutData._leadingOrphans = [];\n\tlayoutData._trailingOrphans = [];\n\tlayoutData._containerHeight = layoutConfig.containerPadding.top;\n\tlayoutData._rows = [];\n\tlayoutData._orphans = [];\n\tlayoutConfig._widowCount = 0;\n\n\t// Convert widths and heights to aspect ratios if we need to\n\treturn computeLayout(layoutConfig, layoutData, input.map(function (item) {\n\t\tif (item.width && item.height) {\n\t\t\treturn { aspectRatio: item.width / item.height };\n\t\t} else {\n\t\t\treturn { aspectRatio: item };\n\t\t}\n\t}));\n};\n","/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n * @license\n */\n\n/**\n * Row\n * Wrapper for each row in a justified layout.\n * Stores relevant values and provides methods for calculating layout of individual rows.\n *\n * @param {Object} layoutConfig - The same as that passed\n * @param {Object} Initialization parameters. The following are all required:\n * @param params.top {Number} Top of row, relative to container\n * @param params.left {Number} Left side of row relative to container (equal to container left padding)\n * @param params.width {Number} Width of row, not including container padding\n * @param params.spacing {Number} Horizontal spacing between items\n * @param params.targetRowHeight {Number} Layout algorithm will aim for this row height\n * @param params.targetRowHeightTolerance {Number} Row heights may vary +/- (`targetRowHeight` x `targetRowHeightTolerance`)\n * @param params.edgeCaseMinRowHeight {Number} Absolute minimum row height for edge cases that cannot be resolved within tolerance.\n * @param params.edgeCaseMaxRowHeight {Number} Absolute maximum row height for edge cases that cannot be resolved within tolerance.\n * @param params.isBreakoutRow {Boolean} Is this row in particular one of those breakout rows? Always false if it's not that kind of photo list\n * @param params.widowLayoutStyle {String} If widows are visible, how should they be laid out?\n * @constructor\n */\n\nvar Row = module.exports = function (params) {\n\n\t// Top of row, relative to container\n\tthis.top = params.top;\n\n\t// Left side of row relative to container (equal to container left padding)\n\tthis.left = params.left;\n\n\t// Width of row, not including container padding\n\tthis.width = params.width;\n\n\t// Horizontal spacing between items\n\tthis.spacing = params.spacing;\n\n\t// Row height calculation values\n\tthis.targetRowHeight = params.targetRowHeight;\n\tthis.targetRowHeightTolerance = params.targetRowHeightTolerance;\n\tthis.minAspectRatio = this.width / params.targetRowHeight * (1 - params.targetRowHeightTolerance);\n\tthis.maxAspectRatio = this.width / params.targetRowHeight * (1 + params.targetRowHeightTolerance);\n\n\t// Edge case row height minimum/maximum\n\tthis.edgeCaseMinRowHeight = params.edgeCaseMinRowHeight;\n\tthis.edgeCaseMaxRowHeight = params.edgeCaseMaxRowHeight;\n\n\t// Widow layout direction\n\tthis.widowLayoutStyle = params.widowLayoutStyle;\n\n\t// Full width breakout rows\n\tthis.isBreakoutRow = params.isBreakoutRow;\n\n\t// Store layout data for each item in row\n\tthis.items = [];\n\n\t// Height remains at 0 until it's been calculated\n\tthis.height = 0;\n\n};\n\nRow.prototype = {\n\n\t/**\n\t * Attempt to add a single item to the row.\n\t * This is the heart of the justified algorithm.\n\t * This method is direction-agnostic; it deals only with sizes, not positions.\n\t *\n\t * If the item fits in the row, without pushing row height beyond min/max tolerance,\n\t * the item is added and the method returns true.\n\t *\n\t * If the item leaves row height too high, there may be room to scale it down and add another item.\n\t * In this case, the item is added and the method returns true, but the row is incomplete.\n\t *\n\t * If the item leaves row height too short, there are too many items to fit within tolerance.\n\t * The method will either accept or reject the new item, favoring the resulting row height closest to within tolerance.\n\t * If the item is rejected, left/right padding will be required to fit the row height within tolerance;\n\t * if the item is accepted, top/bottom cropping will be required to fit the row height within tolerance.\n\t *\n\t * @method addItem\n\t * @param itemData {Object} Item layout data, containing item aspect ratio.\n\t * @return {Boolean} True if successfully added; false if rejected.\n\t */\n\n\taddItem: function (itemData) {\n\n\t\tvar newItems = this.items.concat(itemData),\n\t\t\t// Calculate aspect ratios for items only; exclude spacing\n\t\t\trowWidthWithoutSpacing = this.width - (newItems.length - 1) * this.spacing,\n\t\t\tnewAspectRatio = newItems.reduce(function (sum, item) {\n\t\t\t\treturn sum + item.aspectRatio;\n\t\t\t}, 0),\n\t\t\ttargetAspectRatio = rowWidthWithoutSpacing / this.targetRowHeight,\n\t\t\tpreviousRowWidthWithoutSpacing,\n\t\t\tpreviousAspectRatio,\n\t\t\tpreviousTargetAspectRatio;\n\n\t\t// Handle big full-width breakout photos if we're doing them\n\t\tif (this.isBreakoutRow) {\n\t\t\t// Only do it if there's no other items in this row\n\t\t\tif (this.items.length === 0) {\n\t\t\t\t// Only go full width if this photo is a square or landscape\n\t\t\t\tif (itemData.aspectRatio >= 1) {\n\t\t\t\t\t// Close out the row with a full width photo\n\t\t\t\t\tthis.items.push(itemData);\n\t\t\t\t\tthis.completeLayout(rowWidthWithoutSpacing / itemData.aspectRatio, 'justify');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (newAspectRatio < this.minAspectRatio) {\n\n\t\t\t// New aspect ratio is too narrow / scaled row height is too tall.\n\t\t\t// Accept this item and leave row open for more items.\n\n\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\treturn true;\n\n\t\t} else if (newAspectRatio > this.maxAspectRatio) {\n\n\t\t\t// New aspect ratio is too wide / scaled row height will be too short.\n\t\t\t// Accept item if the resulting aspect ratio is closer to target than it would be without the item.\n\t\t\t// NOTE: Any row that falls into this block will require cropping/padding on individual items.\n\n\t\t\tif (this.items.length === 0) {\n\n\t\t\t\t// When there are no existing items, force acceptance of the new item and complete the layout.\n\t\t\t\t// This is the pano special case.\n\t\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\t\tthis.completeLayout(rowWidthWithoutSpacing / newAspectRatio, 'justify');\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// Calculate width/aspect ratio for row before adding new item\n\t\t\tpreviousRowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing;\n\t\t\tpreviousAspectRatio = this.items.reduce(function (sum, item) {\n\t\t\t\treturn sum + item.aspectRatio;\n\t\t\t}, 0);\n\t\t\tpreviousTargetAspectRatio = previousRowWidthWithoutSpacing / this.targetRowHeight;\n\n\t\t\tif (Math.abs(newAspectRatio - targetAspectRatio) > Math.abs(previousAspectRatio - previousTargetAspectRatio)) {\n\n\t\t\t\t// Row with new item is us farther away from target than row without; complete layout and reject item.\n\t\t\t\tthis.completeLayout(previousRowWidthWithoutSpacing / previousAspectRatio, 'justify');\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Row with new item is us closer to target than row without;\n\t\t\t\t// accept the new item and complete the row layout.\n\t\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\t\tthis.completeLayout(rowWidthWithoutSpacing / newAspectRatio, 'justify');\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// New aspect ratio / scaled row height is within tolerance;\n\t\t\t// accept the new item and complete the row layout.\n\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\tthis.completeLayout(rowWidthWithoutSpacing / newAspectRatio, 'justify');\n\t\t\treturn true;\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Check if a row has completed its layout.\n\t *\n\t * @method isLayoutComplete\n\t * @return {Boolean} True if complete; false if not.\n\t */\n\n\tisLayoutComplete: function () {\n\t\treturn this.height > 0;\n\t},\n\n\t/**\n\t * Set row height and compute item geometry from that height.\n\t * Will justify items within the row unless instructed not to.\n\t *\n\t * @method completeLayout\n\t * @param newHeight {Number} Set row height to this value.\n\t * @param widowLayoutStyle {String} How should widows display? Supported: left | justify | center\n\t */\n\n\tcompleteLayout: function (newHeight, widowLayoutStyle) {\n\n\t\tvar itemWidthSum = this.left,\n\t\t\trowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing,\n\t\t\tclampedToNativeRatio,\n\t\t\tclampedHeight,\n\t\t\terrorWidthPerItem,\n\t\t\troundedCumulativeErrors,\n\t\t\tsingleItemGeometry,\n\t\t\tcenterOffset;\n\n\t\t// Justify unless explicitly specified otherwise.\n\t\tif (typeof widowLayoutStyle === 'undefined' || ['justify', 'center', 'left'].indexOf(widowLayoutStyle) < 0) {\n\t\t\twidowLayoutStyle = 'left';\n\t\t}\n\n\t\t// Clamp row height to edge case minimum/maximum.\n\t\tclampedHeight = Math.max(this.edgeCaseMinRowHeight, Math.min(newHeight, this.edgeCaseMaxRowHeight));\n\n\t\tif (newHeight !== clampedHeight) {\n\n\t\t\t// If row height was clamped, the resulting row/item aspect ratio will be off,\n\t\t\t// so force it to fit the width (recalculate aspectRatio to match clamped height).\n\t\t\t// NOTE: this will result in cropping/padding commensurate to the amount of clamping.\n\t\t\tthis.height = clampedHeight;\n\t\t\tclampedToNativeRatio = (rowWidthWithoutSpacing / clampedHeight) / (rowWidthWithoutSpacing / newHeight);\n\n\t\t} else {\n\n\t\t\t// If not clamped, leave ratio at 1.0.\n\t\t\tthis.height = newHeight;\n\t\t\tclampedToNativeRatio = 1.0;\n\n\t\t}\n\n\t\t// Compute item geometry based on newHeight.\n\t\tthis.items.forEach(function (item) {\n\n\t\t\titem.top = this.top;\n\t\t\titem.width = item.aspectRatio * this.height * clampedToNativeRatio;\n\t\t\titem.height = this.height;\n\n\t\t\t// Left-to-right.\n\t\t\t// TODO right to left\n\t\t\t// item.left = this.width - itemWidthSum - item.width;\n\t\t\titem.left = itemWidthSum;\n\n\t\t\t// Increment width.\n\t\t\titemWidthSum += item.width + this.spacing;\n\n\t\t}, this);\n\n\t\t// If specified, ensure items fill row and distribute error\n\t\t// caused by rounding width and height across all items.\n\t\tif (widowLayoutStyle === 'justify') {\n\n\t\t\titemWidthSum -= (this.spacing + this.left);\n\n\t\t\terrorWidthPerItem = (itemWidthSum - this.width) / this.items.length;\n\t\t\troundedCumulativeErrors = this.items.map(function (item, i) {\n\t\t\t\treturn Math.round((i + 1) * errorWidthPerItem);\n\t\t\t});\n\n\n\t\t\tif (this.items.length === 1) {\n\n\t\t\t\t// For rows with only one item, adjust item width to fill row.\n\t\t\t\tsingleItemGeometry = this.items[0];\n\t\t\t\tsingleItemGeometry.width -= Math.round(errorWidthPerItem);\n\n\t\t\t} else {\n\n\t\t\t\t// For rows with multiple items, adjust item width and shift items to fill the row,\n\t\t\t\t// while maintaining equal spacing between items in the row.\n\t\t\t\tthis.items.forEach(function (item, i) {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\titem.left -= roundedCumulativeErrors[i - 1];\n\t\t\t\t\t\titem.width -= (roundedCumulativeErrors[i] - roundedCumulativeErrors[i - 1]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\titem.width -= roundedCumulativeErrors[i];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t} else if (widowLayoutStyle === 'center') {\n\n\t\t\t// Center widows\n\t\t\tcenterOffset = (this.width - itemWidthSum) / 2;\n\n\t\t\tthis.items.forEach(function (item) {\n\t\t\t\titem.left += centerOffset + this.spacing;\n\t\t\t}, this);\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Force completion of row layout with current items.\n\t *\n\t * @method forceComplete\n\t * @param fitToWidth {Boolean} Stretch current items to fill the row width.\n\t *                             This will likely result in padding.\n\t * @param fitToWidth {Number}\n\t */\n\n\tforceComplete: function (fitToWidth, rowHeight) {\n\n\t\t// TODO Handle fitting to width\n\t\t// var rowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing,\n\t\t// \tcurrentAspectRatio = this.items.reduce(function (sum, item) {\n\t\t// \t\treturn sum + item.aspectRatio;\n\t\t// \t}, 0);\n\n\t\tif (typeof rowHeight === 'number') {\n\n\t\t\tthis.completeLayout(rowHeight, this.widowLayoutStyle);\n\n\t\t} else {\n\n\t\t\t// Complete using target row height.\n\t\t\tthis.completeLayout(this.targetRowHeight, this.widowLayoutStyle);\n\t\t}\n\n\t},\n\n\t/**\n\t * Return layout data for items within row.\n\t * Note: returns actual list, not a copy.\n\t *\n\t * @method getItems\n\t * @return Layout data for items within row.\n\t */\n\n\tgetItems: function () {\n\t\treturn this.items;\n\t}\n\n};\n"],"names":["data","render","boxRef","useRef","useState","layoutData","seLayoutData","useEffect","length","containerWidth","current","parentElement","clientWidth","justifiedLayout","map","item","width","height","containerPadding","targetRowHeight","boxes","ref","className","styles","index","style","left","top","Object","assign","Store","makeObservable","this","getCatPhotos","myFetch","getList","then","res","dataList","observable","action","observer","curStore","useLocalObservable","store","onClick","id","flex","src","url","preview","placeholder","background","alt","config","fetch","method","json","Row","require","createNewRow","layoutConfig","isBreakoutRow","fullWidthBreakoutRowCadence","_rows","_containerHeight","right","spacing","boxSpacing","horizontal","targetRowHeightTolerance","edgeCaseMinRowHeight","edgeCaseMaxRowHeight","rightToLeft","widowLayoutStyle","addRow","row","push","_layoutItems","concat","getItems","vertical","items","module","exports","input","defaults","maxNumRows","Number","POSITIVE_INFINITY","forceAspectRatio","showWidows","isNaN","parseFloat","bottom","_awakeItems","_inViewportItems","_leadingOrphans","_trailingOrphans","_orphans","_widowCount","itemLayoutData","itemAdded","currentRow","nextToLastRowHeight","laidOutItems","forEach","itemData","forcedAspectRatio","aspectRatio","some","i","Error","addItem","isLayoutComplete","forceComplete","containerHeight","widowCount","computeLayout","params","minAspectRatio","maxAspectRatio","prototype","previousRowWidthWithoutSpacing","previousAspectRatio","previousTargetAspectRatio","newItems","rowWidthWithoutSpacing","newAspectRatio","reduce","sum","targetAspectRatio","completeLayout","Math","abs","newHeight","clampedToNativeRatio","clampedHeight","errorWidthPerItem","roundedCumulativeErrors","centerOffset","itemWidthSum","indexOf","max","min","round","fitToWidth","rowHeight"],"sourceRoot":""}