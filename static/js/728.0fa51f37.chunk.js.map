{"version":3,"file":"static/js/728.0fa51f37.chunk.js","mappings":"2SAQMA,EAAgB,SAACC,GACnB,IAAMC,EAAaC,GAAAA,CAAgBF,EAAMG,KAAKC,KAAI,SAAAC,GAAO,OAAOA,EAAKC,MAAMD,EAAKE,UAAS,CACrFC,iBAAiB,GACjBC,gBAAgB,IAChBC,eAAgBC,SAASC,KAAKC,YAAY,MAC3CC,MAOC,OAAO,yBAECb,EAAWG,KAAI,SAACC,EAAKU,GACjB,IAAMC,EAAM,CACRC,SAAS,WACTX,MAAMD,EAAKC,MAAM,KACjBC,OAAOF,EAAKE,OAAO,KACnBW,KAAKb,EAAKa,KAAK,KACfC,IAAId,EAAKc,IAAI,MAGjB,OAAO,gBAAiBH,MAAOA,EAAxB,SACFhB,EAAMoB,KAAKpB,EAAMG,KAAKY,GAAOA,IADjBA,SAUxBM,EAAO,SAACrB,GACjB,OAA6BsB,EAAAA,EAAAA,UAAS,IAAtC,eAAOC,EAAP,KAAeC,EAAf,KAIMC,EAAe,WACjB,OAAUC,EAAAA,EAAAA,GAAQ,wDAMhBC,EAAe,WACjBH,EAAW,IACXC,IAAeG,MAAK,SAAAzB,GAChBqB,EAAWrB,OA8CnB,OAfA0B,EAAAA,EAAAA,YAAU,WAWNF,MAEF,KAEM,4BACJ,0BACI,SAAC,IAAD,CAAQG,KAAK,UAAUC,QAAS,WAC5BJ,KADJ,mCAKJ,gBAAKK,GAAG,eAAehB,MAAO,CAACC,SAAS,WAAWX,MAAM,QAAzD,UACI,SAACP,EAAD,CAAeI,KAAMoB,EAASH,KAAM,SAACf,EAAKU,GAAS,OAAO,SAAC,IAAD,CAAmBkB,IAAK5B,EAAK6B,IAAK,WAAU7B,EAAK6B,IAAKC,SAAS,EAAOC,UAAU,WAAWC,aAAa,gBAAKrB,MAAO,CAACV,MAAM,OAAOC,OAAO,OAAO+B,WAAW,UAAiBhC,MAAM,OAAOC,OAAO,OAAQgC,IAAI,IAAhMxB,Y,uGCtG7E,O,8BAJD,WACI,OAAO,0BACH,SAACM,EAAD,UAEP,E,CALwBmB,EAAAA,Y,mBCC7B,IAHe,SAACN,EAAIO,GACjB,OAAQC,MAAMR,EAAIS,OAAOC,OAAO,CAACC,OAAO,OAAOJ,IAASb,MAAK,SAAAkB,GAAG,OAAGA,EAAIC","sources":["component/test/index.js","page/cat/index.js","service/fetch.js"],"sourcesContent":["import React,{useEffect, useState} from \"react\";\r\nimport './test.css';\r\nimport justifiedLayout from 'justified-layout';\r\nimport {defaultImgSrc} from 'src/constants'\r\nimport {Image,Button} from \"antd\";\r\nimport myFetch from 'src/service/fetch'\r\n\r\n\r\nconst JustifyLayout = (props)=>{\r\n    const layoutData = justifiedLayout(props.data.map(item=>{return item.width/item.height}),{\r\n        containerPadding:10,\r\n        targetRowHeight:160,\r\n        containerWidth: document.body.clientWidth-100\r\n    }).boxes;\r\n/*    let newChildren = [];\r\n    React.Children.forEach(props.children,(item,index)=>{\r\n        item = Object.assign(item,layoutData[index])\r\n        newChildren.push(item)\r\n    })*/\r\n\r\n        return <div>\r\n            {\r\n                layoutData.map((item,index)=>{\r\n                    const style={\r\n                        position:'absolute',\r\n                        width:item.width+'px',\r\n                        height:item.height+'px',\r\n                        left:item.left+'px',\r\n                        top:item.top+'px'\r\n                    }\r\n\r\n                    return <div key={index} style={style}>\r\n                        {props.Item(props.data[index],index)}\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n\r\n\r\n}\r\n\r\nexport const Cats = (props)=>{\r\n    const [catList,setCatList] = useState([]);\r\n\r\n\r\n\r\n    const getCatPhotos = ()=>{\r\n        return    myFetch('https://api.thecatapi.com/v1/images/search?limit=30')\r\n    }\r\n\r\n\r\n    /*换一批*/\r\n\r\n    const getOtherCats = ()=>{\r\n        setCatList([]);\r\n        getCatPhotos().then(data=>{\r\n            setCatList(data);\r\n        })\r\n    }\r\n\r\n\r\n\r\n    /*加载更多*/\r\n    const loadMore = ()=>{\r\n        getCatPhotos().then(data=>{\r\n            let arr = [...catList,...data];\r\n            setCatList(arr);\r\n        })\r\n    }\r\n\r\n\r\n    const lazyLoadImg = ()=>{\r\n        setTimeout(()=>{\r\n            const imgs = document.querySelectorAll(\"img.lazyload\");\r\n            const observer = new IntersectionObserver(nodes => {\r\n                nodes.forEach(v => {\r\n                    if (v.isIntersecting) { // 判断是否进入可视区域\r\n                        v.target.src = v.target.parentNode.dataset.src; // 赋值加载图片\r\n                        observer.unobserve(v.target); // 停止监听已加载的图片\r\n                    }\r\n                });\r\n            });\r\n            imgs.forEach(v => observer.observe(v));\r\n        },300)\r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n/*        const bottom = document.getElementById(\"catBottom\");\r\n        const observer = new IntersectionObserver(nodes => {\r\n            const tgt = nodes[0]; // 反正只有一个\r\n            if (tgt.isIntersecting) {\r\n                // 执行接口请求代码\r\n                alert(\"加载更多\")\r\n                loadMore();\r\n            }\r\n        })\r\n        observer.observe(bottom);*/\r\n        getOtherCats();\r\n\r\n    },[])\r\n\r\n    return (<div>\r\n        <div>\r\n            <Button type=\"primary\" onClick={()=>{\r\n                getOtherCats()\r\n            }}\r\n            >换一批</Button>\r\n        </div>\r\n        <div id=\"catContainer\" style={{position:'relative',width:'100%'}}>\r\n            <JustifyLayout data={catList} Item={(item,index)=>{return <Image key={index} src={item.url} data-src={item.url} preview={false} className=\"lazyload\" placeholder={<div style={{width:'100%',height:'100%',background:\"#ddd\"}}></div>} width=\"100%\" height=\"100%\"  alt=\"\"/>}}></JustifyLayout>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\n","import React,{Component} from 'react'\r\nimport {Cats} from \"src/component/test\";\r\n\r\nexport default class extends Component{\r\n    render() {\r\n        return <div>\r\n            <Cats />\r\n        </div>\r\n    }\r\n}","\r\nconst myFetch =(url,config)=>{\r\n   return  fetch(url,Object.assign({method:'get'},config)).then(res=> res.json());\r\n}\r\nexport default myFetch\r\n"],"names":["JustifyLayout","props","layoutData","justifiedLayout","data","map","item","width","height","containerPadding","targetRowHeight","containerWidth","document","body","clientWidth","boxes","index","style","position","left","top","Item","Cats","useState","catList","setCatList","getCatPhotos","myFetch","getOtherCats","then","useEffect","type","onClick","id","src","url","preview","className","placeholder","background","alt","Component","config","fetch","Object","assign","method","res","json"],"sourceRoot":""}