{"version":3,"file":"static/js/676.c574a1b1.chunk.js","mappings":"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","sources":["../node_modules/justified-layout/lib/index.js","../node_modules/justified-layout/lib/row.js"],"sourcesContent":["/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n * @license\n */\n\n'use strict';\n\nvar Row = require('./row');\n\n/**\n * Create a new, empty row.\n *\n * @method createNewRow\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @return A new, empty row of the type specified by this layout.\n */\n\nfunction createNewRow(layoutConfig, layoutData) {\n\n\tvar isBreakoutRow;\n\n\t// Work out if this is a full width breakout row\n\tif (layoutConfig.fullWidthBreakoutRowCadence !== false) {\n\t\tif (((layoutData._rows.length + 1) % layoutConfig.fullWidthBreakoutRowCadence) === 0) {\n\t\t\tisBreakoutRow = true;\n\t\t}\n\t}\n\n\treturn new Row({\n\t\ttop: layoutData._containerHeight,\n\t\tleft: layoutConfig.containerPadding.left,\n\t\twidth: layoutConfig.containerWidth - layoutConfig.containerPadding.left - layoutConfig.containerPadding.right,\n\t\tspacing: layoutConfig.boxSpacing.horizontal,\n\t\ttargetRowHeight: layoutConfig.targetRowHeight,\n\t\ttargetRowHeightTolerance: layoutConfig.targetRowHeightTolerance,\n\t\tedgeCaseMinRowHeight: 0.5 * layoutConfig.targetRowHeight,\n\t\tedgeCaseMaxRowHeight: 2 * layoutConfig.targetRowHeight,\n\t\trightToLeft: false,\n\t\tisBreakoutRow: isBreakoutRow,\n\t\twidowLayoutStyle: layoutConfig.widowLayoutStyle\n\t});\n}\n\n/**\n * Add a completed row to the layout.\n * Note: the row must have already been completed.\n *\n * @method addRow\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @param row {Row} The row to add.\n * @return {Array} Each item added to the row.\n */\n\nfunction addRow(layoutConfig, layoutData, row) {\n\n\tlayoutData._rows.push(row);\n\tlayoutData._layoutItems = layoutData._layoutItems.concat(row.getItems());\n\n\t// Increment the container height\n\tlayoutData._containerHeight += row.height + layoutConfig.boxSpacing.vertical;\n\n\treturn row.items;\n}\n\n/**\n * Calculate the current layout for all items in the list that require layout.\n * \"Layout\" means geometry: position within container and size\n *\n * @method computeLayout\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @param itemLayoutData {Array} Array of items to lay out, with data required to lay out each item\n * @return {Object} The newly-calculated layout, containing the new container height, and lists of layout items\n */\n\nfunction computeLayout(layoutConfig, layoutData, itemLayoutData) {\n\n\tvar laidOutItems = [],\n\t\titemAdded,\n\t\tcurrentRow,\n\t\tnextToLastRowHeight;\n\n\t// Apply forced aspect ratio if specified, and set a flag.\n\tif (layoutConfig.forceAspectRatio) {\n\t\titemLayoutData.forEach(function (itemData) {\n\t\t\titemData.forcedAspectRatio = true;\n\t\t\titemData.aspectRatio = layoutConfig.forceAspectRatio;\n\t\t});\n\t}\n\n\t// Loop through the items\n\titemLayoutData.some(function (itemData, i) {\n\n\t\tif (isNaN(itemData.aspectRatio)) {\n\t\t\tthrow new Error(\"Item \" + i + \" has an invalid aspect ratio\");\n\t\t}\n\n\t\t// If not currently building up a row, make a new one.\n\t\tif (!currentRow) {\n\t\t\tcurrentRow = createNewRow(layoutConfig, layoutData);\n\t\t}\n\n\t\t// Attempt to add item to the current row.\n\t\titemAdded = currentRow.addItem(itemData);\n\n\t\tif (currentRow.isLayoutComplete()) {\n\n\t\t\t// Row is filled; add it and start a new one\n\t\t\tlaidOutItems = laidOutItems.concat(addRow(layoutConfig, layoutData, currentRow));\n\n\t\t\tif (layoutData._rows.length >= layoutConfig.maxNumRows) {\n\t\t\t\tcurrentRow = null;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tcurrentRow = createNewRow(layoutConfig, layoutData);\n\n\t\t\t// Item was rejected; add it to its own row\n\t\t\tif (!itemAdded) {\n\n\t\t\t\titemAdded = currentRow.addItem(itemData);\n\n\t\t\t\tif (currentRow.isLayoutComplete()) {\n\n\t\t\t\t\t// If the rejected item fills a row on its own, add the row and start another new one\n\t\t\t\t\tlaidOutItems = laidOutItems.concat(addRow(layoutConfig, layoutData, currentRow));\n\t\t\t\t\tif (layoutData._rows.length >= layoutConfig.maxNumRows) {\n\t\t\t\t\t\tcurrentRow = null;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcurrentRow = createNewRow(layoutConfig, layoutData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\t// Handle any leftover content (orphans) depending on where they lie\n\t// in this layout update, and in the total content set.\n\tif (currentRow && currentRow.getItems().length && layoutConfig.showWidows) {\n\n\t\t// Last page of all content or orphan suppression is suppressed; lay out orphans.\n\t\tif (layoutData._rows.length) {\n\n\t\t\t// Only Match previous row's height if it exists and it isn't a breakout row\n\t\t\tif (layoutData._rows[layoutData._rows.length - 1].isBreakoutRow) {\n\t\t\t\tnextToLastRowHeight = layoutData._rows[layoutData._rows.length - 1].targetRowHeight;\n\t\t\t} else {\n\t\t\t\tnextToLastRowHeight = layoutData._rows[layoutData._rows.length - 1].height;\n\t\t\t}\n\n\t\t\tcurrentRow.forceComplete(false, nextToLastRowHeight);\n\n\t\t} else {\n\n\t\t\t// ...else use target height if there is no other row height to reference.\n\t\t\tcurrentRow.forceComplete(false);\n\n\t\t}\n\n\t\tlaidOutItems = laidOutItems.concat(addRow(layoutConfig, layoutData, currentRow));\n\t\tlayoutConfig._widowCount = currentRow.getItems().length;\n\n\t}\n\n\t// We need to clean up the bottom container padding\n\t// First remove the height added for box spacing\n\tlayoutData._containerHeight = layoutData._containerHeight - layoutConfig.boxSpacing.vertical;\n\t// Then add our bottom container padding\n\tlayoutData._containerHeight = layoutData._containerHeight + layoutConfig.containerPadding.bottom;\n\n\treturn {\n\t\tcontainerHeight: layoutData._containerHeight,\n\t\twidowCount: layoutConfig._widowCount,\n\t\tboxes: layoutData._layoutItems\n\t};\n\n}\n\n/**\n * Takes in a bunch of box data and config. Returns\n * geometry to lay them out in a justified view.\n *\n * @method covertSizesToAspectRatios\n * @param sizes {Array} Array of objects with widths and heights\n * @return {Array} A list of aspect ratios\n */\n\nmodule.exports = function (input, config) {\n\tvar layoutConfig = {};\n\tvar layoutData = {};\n\n\t// Defaults\n\tvar defaults = {\n\t\tcontainerWidth: 1060,\n\t\tcontainerPadding: 10,\n\t\tboxSpacing: 10,\n\t\ttargetRowHeight: 320,\n\t\ttargetRowHeightTolerance: 0.25,\n\t\tmaxNumRows: Number.POSITIVE_INFINITY,\n\t\tforceAspectRatio: false,\n\t\tshowWidows: true,\n\t\tfullWidthBreakoutRowCadence: false,\n\t\twidowLayoutStyle: 'left'\n\t};\n\n\tvar containerPadding = {};\n\tvar boxSpacing = {};\n\n\tconfig = config || {};\n\n\t// Merge defaults and config passed in\n\tlayoutConfig = Object.assign(defaults, config);\n\n\t// Sort out padding and spacing values\n\tcontainerPadding.top = (!isNaN(parseFloat(layoutConfig.containerPadding.top))) ? layoutConfig.containerPadding.top : layoutConfig.containerPadding;\n\tcontainerPadding.right = (!isNaN(parseFloat(layoutConfig.containerPadding.right))) ? layoutConfig.containerPadding.right : layoutConfig.containerPadding;\n\tcontainerPadding.bottom = (!isNaN(parseFloat(layoutConfig.containerPadding.bottom))) ? layoutConfig.containerPadding.bottom : layoutConfig.containerPadding;\n\tcontainerPadding.left = (!isNaN(parseFloat(layoutConfig.containerPadding.left))) ? layoutConfig.containerPadding.left : layoutConfig.containerPadding;\n\tboxSpacing.horizontal = (!isNaN(parseFloat(layoutConfig.boxSpacing.horizontal))) ? layoutConfig.boxSpacing.horizontal : layoutConfig.boxSpacing;\n\tboxSpacing.vertical = (!isNaN(parseFloat(layoutConfig.boxSpacing.vertical))) ? layoutConfig.boxSpacing.vertical : layoutConfig.boxSpacing;\n\n\tlayoutConfig.containerPadding = containerPadding;\n\tlayoutConfig.boxSpacing = boxSpacing;\n\n\t// Local\n\tlayoutData._layoutItems = [];\n\tlayoutData._awakeItems = [];\n\tlayoutData._inViewportItems = [];\n\tlayoutData._leadingOrphans = [];\n\tlayoutData._trailingOrphans = [];\n\tlayoutData._containerHeight = layoutConfig.containerPadding.top;\n\tlayoutData._rows = [];\n\tlayoutData._orphans = [];\n\tlayoutConfig._widowCount = 0;\n\n\t// Convert widths and heights to aspect ratios if we need to\n\treturn computeLayout(layoutConfig, layoutData, input.map(function (item) {\n\t\tif (item.width && item.height) {\n\t\t\treturn { aspectRatio: item.width / item.height };\n\t\t} else {\n\t\t\treturn { aspectRatio: item };\n\t\t}\n\t}));\n};\n","/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n * @license\n */\n\n/**\n * Row\n * Wrapper for each row in a justified layout.\n * Stores relevant values and provides methods for calculating layout of individual rows.\n *\n * @param {Object} layoutConfig - The same as that passed\n * @param {Object} Initialization parameters. The following are all required:\n * @param params.top {Number} Top of row, relative to container\n * @param params.left {Number} Left side of row relative to container (equal to container left padding)\n * @param params.width {Number} Width of row, not including container padding\n * @param params.spacing {Number} Horizontal spacing between items\n * @param params.targetRowHeight {Number} Layout algorithm will aim for this row height\n * @param params.targetRowHeightTolerance {Number} Row heights may vary +/- (`targetRowHeight` x `targetRowHeightTolerance`)\n * @param params.edgeCaseMinRowHeight {Number} Absolute minimum row height for edge cases that cannot be resolved within tolerance.\n * @param params.edgeCaseMaxRowHeight {Number} Absolute maximum row height for edge cases that cannot be resolved within tolerance.\n * @param params.isBreakoutRow {Boolean} Is this row in particular one of those breakout rows? Always false if it's not that kind of photo list\n * @param params.widowLayoutStyle {String} If widows are visible, how should they be laid out?\n * @constructor\n */\n\nvar Row = module.exports = function (params) {\n\n\t// Top of row, relative to container\n\tthis.top = params.top;\n\n\t// Left side of row relative to container (equal to container left padding)\n\tthis.left = params.left;\n\n\t// Width of row, not including container padding\n\tthis.width = params.width;\n\n\t// Horizontal spacing between items\n\tthis.spacing = params.spacing;\n\n\t// Row height calculation values\n\tthis.targetRowHeight = params.targetRowHeight;\n\tthis.targetRowHeightTolerance = params.targetRowHeightTolerance;\n\tthis.minAspectRatio = this.width / params.targetRowHeight * (1 - params.targetRowHeightTolerance);\n\tthis.maxAspectRatio = this.width / params.targetRowHeight * (1 + params.targetRowHeightTolerance);\n\n\t// Edge case row height minimum/maximum\n\tthis.edgeCaseMinRowHeight = params.edgeCaseMinRowHeight;\n\tthis.edgeCaseMaxRowHeight = params.edgeCaseMaxRowHeight;\n\n\t// Widow layout direction\n\tthis.widowLayoutStyle = params.widowLayoutStyle;\n\n\t// Full width breakout rows\n\tthis.isBreakoutRow = params.isBreakoutRow;\n\n\t// Store layout data for each item in row\n\tthis.items = [];\n\n\t// Height remains at 0 until it's been calculated\n\tthis.height = 0;\n\n};\n\nRow.prototype = {\n\n\t/**\n\t * Attempt to add a single item to the row.\n\t * This is the heart of the justified algorithm.\n\t * This method is direction-agnostic; it deals only with sizes, not positions.\n\t *\n\t * If the item fits in the row, without pushing row height beyond min/max tolerance,\n\t * the item is added and the method returns true.\n\t *\n\t * If the item leaves row height too high, there may be room to scale it down and add another item.\n\t * In this case, the item is added and the method returns true, but the row is incomplete.\n\t *\n\t * If the item leaves row height too short, there are too many items to fit within tolerance.\n\t * The method will either accept or reject the new item, favoring the resulting row height closest to within tolerance.\n\t * If the item is rejected, left/right padding will be required to fit the row height within tolerance;\n\t * if the item is accepted, top/bottom cropping will be required to fit the row height within tolerance.\n\t *\n\t * @method addItem\n\t * @param itemData {Object} Item layout data, containing item aspect ratio.\n\t * @return {Boolean} True if successfully added; false if rejected.\n\t */\n\n\taddItem: function (itemData) {\n\n\t\tvar newItems = this.items.concat(itemData),\n\t\t\t// Calculate aspect ratios for items only; exclude spacing\n\t\t\trowWidthWithoutSpacing = this.width - (newItems.length - 1) * this.spacing,\n\t\t\tnewAspectRatio = newItems.reduce(function (sum, item) {\n\t\t\t\treturn sum + item.aspectRatio;\n\t\t\t}, 0),\n\t\t\ttargetAspectRatio = rowWidthWithoutSpacing / this.targetRowHeight,\n\t\t\tpreviousRowWidthWithoutSpacing,\n\t\t\tpreviousAspectRatio,\n\t\t\tpreviousTargetAspectRatio;\n\n\t\t// Handle big full-width breakout photos if we're doing them\n\t\tif (this.isBreakoutRow) {\n\t\t\t// Only do it if there's no other items in this row\n\t\t\tif (this.items.length === 0) {\n\t\t\t\t// Only go full width if this photo is a square or landscape\n\t\t\t\tif (itemData.aspectRatio >= 1) {\n\t\t\t\t\t// Close out the row with a full width photo\n\t\t\t\t\tthis.items.push(itemData);\n\t\t\t\t\tthis.completeLayout(rowWidthWithoutSpacing / itemData.aspectRatio, 'justify');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (newAspectRatio < this.minAspectRatio) {\n\n\t\t\t// New aspect ratio is too narrow / scaled row height is too tall.\n\t\t\t// Accept this item and leave row open for more items.\n\n\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\treturn true;\n\n\t\t} else if (newAspectRatio > this.maxAspectRatio) {\n\n\t\t\t// New aspect ratio is too wide / scaled row height will be too short.\n\t\t\t// Accept item if the resulting aspect ratio is closer to target than it would be without the item.\n\t\t\t// NOTE: Any row that falls into this block will require cropping/padding on individual items.\n\n\t\t\tif (this.items.length === 0) {\n\n\t\t\t\t// When there are no existing items, force acceptance of the new item and complete the layout.\n\t\t\t\t// This is the pano special case.\n\t\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\t\tthis.completeLayout(rowWidthWithoutSpacing / newAspectRatio, 'justify');\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// Calculate width/aspect ratio for row before adding new item\n\t\t\tpreviousRowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing;\n\t\t\tpreviousAspectRatio = this.items.reduce(function (sum, item) {\n\t\t\t\treturn sum + item.aspectRatio;\n\t\t\t}, 0);\n\t\t\tpreviousTargetAspectRatio = previousRowWidthWithoutSpacing / this.targetRowHeight;\n\n\t\t\tif (Math.abs(newAspectRatio - targetAspectRatio) > Math.abs(previousAspectRatio - previousTargetAspectRatio)) {\n\n\t\t\t\t// Row with new item is us farther away from target than row without; complete layout and reject item.\n\t\t\t\tthis.completeLayout(previousRowWidthWithoutSpacing / previousAspectRatio, 'justify');\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Row with new item is us closer to target than row without;\n\t\t\t\t// accept the new item and complete the row layout.\n\t\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\t\tthis.completeLayout(rowWidthWithoutSpacing / newAspectRatio, 'justify');\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// New aspect ratio / scaled row height is within tolerance;\n\t\t\t// accept the new item and complete the row layout.\n\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\tthis.completeLayout(rowWidthWithoutSpacing / newAspectRatio, 'justify');\n\t\t\treturn true;\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Check if a row has completed its layout.\n\t *\n\t * @method isLayoutComplete\n\t * @return {Boolean} True if complete; false if not.\n\t */\n\n\tisLayoutComplete: function () {\n\t\treturn this.height > 0;\n\t},\n\n\t/**\n\t * Set row height and compute item geometry from that height.\n\t * Will justify items within the row unless instructed not to.\n\t *\n\t * @method completeLayout\n\t * @param newHeight {Number} Set row height to this value.\n\t * @param widowLayoutStyle {String} How should widows display? Supported: left | justify | center\n\t */\n\n\tcompleteLayout: function (newHeight, widowLayoutStyle) {\n\n\t\tvar itemWidthSum = this.left,\n\t\t\trowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing,\n\t\t\tclampedToNativeRatio,\n\t\t\tclampedHeight,\n\t\t\terrorWidthPerItem,\n\t\t\troundedCumulativeErrors,\n\t\t\tsingleItemGeometry,\n\t\t\tcenterOffset;\n\n\t\t// Justify unless explicitly specified otherwise.\n\t\tif (typeof widowLayoutStyle === 'undefined' || ['justify', 'center', 'left'].indexOf(widowLayoutStyle) < 0) {\n\t\t\twidowLayoutStyle = 'left';\n\t\t}\n\n\t\t// Clamp row height to edge case minimum/maximum.\n\t\tclampedHeight = Math.max(this.edgeCaseMinRowHeight, Math.min(newHeight, this.edgeCaseMaxRowHeight));\n\n\t\tif (newHeight !== clampedHeight) {\n\n\t\t\t// If row height was clamped, the resulting row/item aspect ratio will be off,\n\t\t\t// so force it to fit the width (recalculate aspectRatio to match clamped height).\n\t\t\t// NOTE: this will result in cropping/padding commensurate to the amount of clamping.\n\t\t\tthis.height = clampedHeight;\n\t\t\tclampedToNativeRatio = (rowWidthWithoutSpacing / clampedHeight) / (rowWidthWithoutSpacing / newHeight);\n\n\t\t} else {\n\n\t\t\t// If not clamped, leave ratio at 1.0.\n\t\t\tthis.height = newHeight;\n\t\t\tclampedToNativeRatio = 1.0;\n\n\t\t}\n\n\t\t// Compute item geometry based on newHeight.\n\t\tthis.items.forEach(function (item) {\n\n\t\t\titem.top = this.top;\n\t\t\titem.width = item.aspectRatio * this.height * clampedToNativeRatio;\n\t\t\titem.height = this.height;\n\n\t\t\t// Left-to-right.\n\t\t\t// TODO right to left\n\t\t\t// item.left = this.width - itemWidthSum - item.width;\n\t\t\titem.left = itemWidthSum;\n\n\t\t\t// Increment width.\n\t\t\titemWidthSum += item.width + this.spacing;\n\n\t\t}, this);\n\n\t\t// If specified, ensure items fill row and distribute error\n\t\t// caused by rounding width and height across all items.\n\t\tif (widowLayoutStyle === 'justify') {\n\n\t\t\titemWidthSum -= (this.spacing + this.left);\n\n\t\t\terrorWidthPerItem = (itemWidthSum - this.width) / this.items.length;\n\t\t\troundedCumulativeErrors = this.items.map(function (item, i) {\n\t\t\t\treturn Math.round((i + 1) * errorWidthPerItem);\n\t\t\t});\n\n\n\t\t\tif (this.items.length === 1) {\n\n\t\t\t\t// For rows with only one item, adjust item width to fill row.\n\t\t\t\tsingleItemGeometry = this.items[0];\n\t\t\t\tsingleItemGeometry.width -= Math.round(errorWidthPerItem);\n\n\t\t\t} else {\n\n\t\t\t\t// For rows with multiple items, adjust item width and shift items to fill the row,\n\t\t\t\t// while maintaining equal spacing between items in the row.\n\t\t\t\tthis.items.forEach(function (item, i) {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\titem.left -= roundedCumulativeErrors[i - 1];\n\t\t\t\t\t\titem.width -= (roundedCumulativeErrors[i] - roundedCumulativeErrors[i - 1]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\titem.width -= roundedCumulativeErrors[i];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t} else if (widowLayoutStyle === 'center') {\n\n\t\t\t// Center widows\n\t\t\tcenterOffset = (this.width - itemWidthSum) / 2;\n\n\t\t\tthis.items.forEach(function (item) {\n\t\t\t\titem.left += centerOffset + this.spacing;\n\t\t\t}, this);\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Force completion of row layout with current items.\n\t *\n\t * @method forceComplete\n\t * @param fitToWidth {Boolean} Stretch current items to fill the row width.\n\t *                             This will likely result in padding.\n\t * @param fitToWidth {Number}\n\t */\n\n\tforceComplete: function (fitToWidth, rowHeight) {\n\n\t\t// TODO Handle fitting to width\n\t\t// var rowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing,\n\t\t// \tcurrentAspectRatio = this.items.reduce(function (sum, item) {\n\t\t// \t\treturn sum + item.aspectRatio;\n\t\t// \t}, 0);\n\n\t\tif (typeof rowHeight === 'number') {\n\n\t\t\tthis.completeLayout(rowHeight, this.widowLayoutStyle);\n\n\t\t} else {\n\n\t\t\t// Complete using target row height.\n\t\t\tthis.completeLayout(this.targetRowHeight, this.widowLayoutStyle);\n\t\t}\n\n\t},\n\n\t/**\n\t * Return layout data for items within row.\n\t * Note: returns actual list, not a copy.\n\t *\n\t * @method getItems\n\t * @return Layout data for items within row.\n\t */\n\n\tgetItems: function () {\n\t\treturn this.items;\n\t}\n\n};\n"],"names":["Row","require","createNewRow","layoutConfig","layoutData","isBreakoutRow","fullWidthBreakoutRowCadence","_rows","length","top","_containerHeight","left","containerPadding","width","containerWidth","right","spacing","boxSpacing","horizontal","targetRowHeight","targetRowHeightTolerance","edgeCaseMinRowHeight","edgeCaseMaxRowHeight","rightToLeft","widowLayoutStyle","addRow","row","push","_layoutItems","concat","getItems","height","vertical","items","module","exports","input","config","defaults","maxNumRows","Number","POSITIVE_INFINITY","forceAspectRatio","showWidows","Object","assign","isNaN","parseFloat","bottom","_awakeItems","_inViewportItems","_leadingOrphans","_trailingOrphans","_orphans","_widowCount","itemLayoutData","itemAdded","currentRow","nextToLastRowHeight","laidOutItems","forEach","itemData","forcedAspectRatio","aspectRatio","some","i","Error","addItem","isLayoutComplete","forceComplete","containerHeight","widowCount","boxes","computeLayout","map","item","params","this","minAspectRatio","maxAspectRatio","prototype","previousRowWidthWithoutSpacing","previousAspectRatio","previousTargetAspectRatio","newItems","rowWidthWithoutSpacing","newAspectRatio","reduce","sum","targetAspectRatio","completeLayout","Math","abs","newHeight","clampedToNativeRatio","clampedHeight","errorWidthPerItem","roundedCumulativeErrors","centerOffset","itemWidthSum","indexOf","max","min","round","fitToWidth","rowHeight"],"sourceRoot":""}