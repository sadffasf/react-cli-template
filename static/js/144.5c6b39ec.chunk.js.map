{"version":3,"file":"static/js/144.5c6b39ec.chunk.js","mappings":"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","sources":["page/cat/test/index.js","page/cat/index.js","../node_modules/justified-layout/lib/index.js","../node_modules/justified-layout/lib/row.js"],"sourcesContent":["import React,{useEffect, useState} from \"react\";\r\nimport './test.css';\r\nimport justifiedLayout from 'justified-layout';\r\nimport {Image,Button} from \"antd\";\r\nimport myFetch from 'src/service/fetch'\r\n\r\n\r\nconst JustifyLayout = (props)=>{\r\n    const layoutData = justifiedLayout(props.data.map(item=>{return item.width/item.height}),{\r\n        containerPadding:10,\r\n        targetRowHeight:160,\r\n        containerWidth: document.body.clientWidth-100\r\n    }).boxes;\r\n        return <div>\r\n            {\r\n                layoutData.map((item,index)=>{\r\n                    const style={\r\n                        position:'absolute',\r\n                        width:item.width+'px',\r\n                        height:item.height+'px',\r\n                        left:item.left+'px',\r\n                        top:item.top+'px'\r\n                    }\r\n\r\n                    return <div key={index} style={style}>\r\n                        {props.Item(props.data[index],index)}\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n}\r\n\r\nexport const Cats = (props)=>{\r\n    const [catList,setCatList] = useState([]);\r\n    const getCatPhotos = ()=>{\r\n        return    myFetch('https://api.thecatapi.com/v1/images/search?limit=30')\r\n    }\r\n    /*换一批*/\r\n    const getOtherCats = ()=>{\r\n        setCatList([]);\r\n        getCatPhotos().then(data=>{\r\n            setCatList(data);\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n        getOtherCats();\r\n    },[])\r\n    return (<div>\r\n        <div>\r\n            <Button type=\"primary\" onClick={()=>{\r\n                getOtherCats()\r\n            }}\r\n            >换一批</Button>\r\n        </div>\r\n        <div id=\"catContainer\" style={{position:'relative',width:'100%'}}>\r\n            <JustifyLayout data={catList} Item={(item,index)=>{return <Image key={index} src={item.url} data-src={item.url} preview={false} className=\"lazyload\" placeholder={<div style={{width:'100%',height:'100%',background:\"#ddd\"}}></div>} width=\"100%\" height=\"100%\"  alt=\"\"/>}}></JustifyLayout>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\n","import React,{Component} from 'react'\r\nimport {Cats} from \"./test\";\r\n\r\nexport default class extends Component{\r\n    render() {\r\n        return <div>\r\n            <Cats />\r\n        </div>\r\n    }\r\n}\r\n","/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n * @license\n */\n\n'use strict';\n\nvar Row = require('./row');\n\n/**\n * Create a new, empty row.\n *\n * @method createNewRow\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @return A new, empty row of the type specified by this layout.\n */\n\nfunction createNewRow(layoutConfig, layoutData) {\n\n\tvar isBreakoutRow;\n\n\t// Work out if this is a full width breakout row\n\tif (layoutConfig.fullWidthBreakoutRowCadence !== false) {\n\t\tif (((layoutData._rows.length + 1) % layoutConfig.fullWidthBreakoutRowCadence) === 0) {\n\t\t\tisBreakoutRow = true;\n\t\t}\n\t}\n\n\treturn new Row({\n\t\ttop: layoutData._containerHeight,\n\t\tleft: layoutConfig.containerPadding.left,\n\t\twidth: layoutConfig.containerWidth - layoutConfig.containerPadding.left - layoutConfig.containerPadding.right,\n\t\tspacing: layoutConfig.boxSpacing.horizontal,\n\t\ttargetRowHeight: layoutConfig.targetRowHeight,\n\t\ttargetRowHeightTolerance: layoutConfig.targetRowHeightTolerance,\n\t\tedgeCaseMinRowHeight: 0.5 * layoutConfig.targetRowHeight,\n\t\tedgeCaseMaxRowHeight: 2 * layoutConfig.targetRowHeight,\n\t\trightToLeft: false,\n\t\tisBreakoutRow: isBreakoutRow,\n\t\twidowLayoutStyle: layoutConfig.widowLayoutStyle\n\t});\n}\n\n/**\n * Add a completed row to the layout.\n * Note: the row must have already been completed.\n *\n * @method addRow\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @param row {Row} The row to add.\n * @return {Array} Each item added to the row.\n */\n\nfunction addRow(layoutConfig, layoutData, row) {\n\n\tlayoutData._rows.push(row);\n\tlayoutData._layoutItems = layoutData._layoutItems.concat(row.getItems());\n\n\t// Increment the container height\n\tlayoutData._containerHeight += row.height + layoutConfig.boxSpacing.vertical;\n\n\treturn row.items;\n}\n\n/**\n * Calculate the current layout for all items in the list that require layout.\n * \"Layout\" means geometry: position within container and size\n *\n * @method computeLayout\n * @param layoutConfig {Object} The layout configuration\n * @param layoutData {Object} The current state of the layout\n * @param itemLayoutData {Array} Array of items to lay out, with data required to lay out each item\n * @return {Object} The newly-calculated layout, containing the new container height, and lists of layout items\n */\n\nfunction computeLayout(layoutConfig, layoutData, itemLayoutData) {\n\n\tvar laidOutItems = [],\n\t\titemAdded,\n\t\tcurrentRow,\n\t\tnextToLastRowHeight;\n\n\t// Apply forced aspect ratio if specified, and set a flag.\n\tif (layoutConfig.forceAspectRatio) {\n\t\titemLayoutData.forEach(function (itemData) {\n\t\t\titemData.forcedAspectRatio = true;\n\t\t\titemData.aspectRatio = layoutConfig.forceAspectRatio;\n\t\t});\n\t}\n\n\t// Loop through the items\n\titemLayoutData.some(function (itemData, i) {\n\n\t\tif (isNaN(itemData.aspectRatio)) {\n\t\t\tthrow new Error(\"Item \" + i + \" has an invalid aspect ratio\");\n\t\t}\n\n\t\t// If not currently building up a row, make a new one.\n\t\tif (!currentRow) {\n\t\t\tcurrentRow = createNewRow(layoutConfig, layoutData);\n\t\t}\n\n\t\t// Attempt to add item to the current row.\n\t\titemAdded = currentRow.addItem(itemData);\n\n\t\tif (currentRow.isLayoutComplete()) {\n\n\t\t\t// Row is filled; add it and start a new one\n\t\t\tlaidOutItems = laidOutItems.concat(addRow(layoutConfig, layoutData, currentRow));\n\n\t\t\tif (layoutData._rows.length >= layoutConfig.maxNumRows) {\n\t\t\t\tcurrentRow = null;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tcurrentRow = createNewRow(layoutConfig, layoutData);\n\n\t\t\t// Item was rejected; add it to its own row\n\t\t\tif (!itemAdded) {\n\n\t\t\t\titemAdded = currentRow.addItem(itemData);\n\n\t\t\t\tif (currentRow.isLayoutComplete()) {\n\n\t\t\t\t\t// If the rejected item fills a row on its own, add the row and start another new one\n\t\t\t\t\tlaidOutItems = laidOutItems.concat(addRow(layoutConfig, layoutData, currentRow));\n\t\t\t\t\tif (layoutData._rows.length >= layoutConfig.maxNumRows) {\n\t\t\t\t\t\tcurrentRow = null;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcurrentRow = createNewRow(layoutConfig, layoutData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\t// Handle any leftover content (orphans) depending on where they lie\n\t// in this layout update, and in the total content set.\n\tif (currentRow && currentRow.getItems().length && layoutConfig.showWidows) {\n\n\t\t// Last page of all content or orphan suppression is suppressed; lay out orphans.\n\t\tif (layoutData._rows.length) {\n\n\t\t\t// Only Match previous row's height if it exists and it isn't a breakout row\n\t\t\tif (layoutData._rows[layoutData._rows.length - 1].isBreakoutRow) {\n\t\t\t\tnextToLastRowHeight = layoutData._rows[layoutData._rows.length - 1].targetRowHeight;\n\t\t\t} else {\n\t\t\t\tnextToLastRowHeight = layoutData._rows[layoutData._rows.length - 1].height;\n\t\t\t}\n\n\t\t\tcurrentRow.forceComplete(false, nextToLastRowHeight);\n\n\t\t} else {\n\n\t\t\t// ...else use target height if there is no other row height to reference.\n\t\t\tcurrentRow.forceComplete(false);\n\n\t\t}\n\n\t\tlaidOutItems = laidOutItems.concat(addRow(layoutConfig, layoutData, currentRow));\n\t\tlayoutConfig._widowCount = currentRow.getItems().length;\n\n\t}\n\n\t// We need to clean up the bottom container padding\n\t// First remove the height added for box spacing\n\tlayoutData._containerHeight = layoutData._containerHeight - layoutConfig.boxSpacing.vertical;\n\t// Then add our bottom container padding\n\tlayoutData._containerHeight = layoutData._containerHeight + layoutConfig.containerPadding.bottom;\n\n\treturn {\n\t\tcontainerHeight: layoutData._containerHeight,\n\t\twidowCount: layoutConfig._widowCount,\n\t\tboxes: layoutData._layoutItems\n\t};\n\n}\n\n/**\n * Takes in a bunch of box data and config. Returns\n * geometry to lay them out in a justified view.\n *\n * @method covertSizesToAspectRatios\n * @param sizes {Array} Array of objects with widths and heights\n * @return {Array} A list of aspect ratios\n */\n\nmodule.exports = function (input, config) {\n\tvar layoutConfig = {};\n\tvar layoutData = {};\n\n\t// Defaults\n\tvar defaults = {\n\t\tcontainerWidth: 1060,\n\t\tcontainerPadding: 10,\n\t\tboxSpacing: 10,\n\t\ttargetRowHeight: 320,\n\t\ttargetRowHeightTolerance: 0.25,\n\t\tmaxNumRows: Number.POSITIVE_INFINITY,\n\t\tforceAspectRatio: false,\n\t\tshowWidows: true,\n\t\tfullWidthBreakoutRowCadence: false,\n\t\twidowLayoutStyle: 'left'\n\t};\n\n\tvar containerPadding = {};\n\tvar boxSpacing = {};\n\n\tconfig = config || {};\n\n\t// Merge defaults and config passed in\n\tlayoutConfig = Object.assign(defaults, config);\n\n\t// Sort out padding and spacing values\n\tcontainerPadding.top = (!isNaN(parseFloat(layoutConfig.containerPadding.top))) ? layoutConfig.containerPadding.top : layoutConfig.containerPadding;\n\tcontainerPadding.right = (!isNaN(parseFloat(layoutConfig.containerPadding.right))) ? layoutConfig.containerPadding.right : layoutConfig.containerPadding;\n\tcontainerPadding.bottom = (!isNaN(parseFloat(layoutConfig.containerPadding.bottom))) ? layoutConfig.containerPadding.bottom : layoutConfig.containerPadding;\n\tcontainerPadding.left = (!isNaN(parseFloat(layoutConfig.containerPadding.left))) ? layoutConfig.containerPadding.left : layoutConfig.containerPadding;\n\tboxSpacing.horizontal = (!isNaN(parseFloat(layoutConfig.boxSpacing.horizontal))) ? layoutConfig.boxSpacing.horizontal : layoutConfig.boxSpacing;\n\tboxSpacing.vertical = (!isNaN(parseFloat(layoutConfig.boxSpacing.vertical))) ? layoutConfig.boxSpacing.vertical : layoutConfig.boxSpacing;\n\n\tlayoutConfig.containerPadding = containerPadding;\n\tlayoutConfig.boxSpacing = boxSpacing;\n\n\t// Local\n\tlayoutData._layoutItems = [];\n\tlayoutData._awakeItems = [];\n\tlayoutData._inViewportItems = [];\n\tlayoutData._leadingOrphans = [];\n\tlayoutData._trailingOrphans = [];\n\tlayoutData._containerHeight = layoutConfig.containerPadding.top;\n\tlayoutData._rows = [];\n\tlayoutData._orphans = [];\n\tlayoutConfig._widowCount = 0;\n\n\t// Convert widths and heights to aspect ratios if we need to\n\treturn computeLayout(layoutConfig, layoutData, input.map(function (item) {\n\t\tif (item.width && item.height) {\n\t\t\treturn { aspectRatio: item.width / item.height };\n\t\t} else {\n\t\t\treturn { aspectRatio: item };\n\t\t}\n\t}));\n};\n","/*!\n * Copyright 2019 SmugMug, Inc.\n * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.\n * @license\n */\n\n/**\n * Row\n * Wrapper for each row in a justified layout.\n * Stores relevant values and provides methods for calculating layout of individual rows.\n *\n * @param {Object} layoutConfig - The same as that passed\n * @param {Object} Initialization parameters. The following are all required:\n * @param params.top {Number} Top of row, relative to container\n * @param params.left {Number} Left side of row relative to container (equal to container left padding)\n * @param params.width {Number} Width of row, not including container padding\n * @param params.spacing {Number} Horizontal spacing between items\n * @param params.targetRowHeight {Number} Layout algorithm will aim for this row height\n * @param params.targetRowHeightTolerance {Number} Row heights may vary +/- (`targetRowHeight` x `targetRowHeightTolerance`)\n * @param params.edgeCaseMinRowHeight {Number} Absolute minimum row height for edge cases that cannot be resolved within tolerance.\n * @param params.edgeCaseMaxRowHeight {Number} Absolute maximum row height for edge cases that cannot be resolved within tolerance.\n * @param params.isBreakoutRow {Boolean} Is this row in particular one of those breakout rows? Always false if it's not that kind of photo list\n * @param params.widowLayoutStyle {String} If widows are visible, how should they be laid out?\n * @constructor\n */\n\nvar Row = module.exports = function (params) {\n\n\t// Top of row, relative to container\n\tthis.top = params.top;\n\n\t// Left side of row relative to container (equal to container left padding)\n\tthis.left = params.left;\n\n\t// Width of row, not including container padding\n\tthis.width = params.width;\n\n\t// Horizontal spacing between items\n\tthis.spacing = params.spacing;\n\n\t// Row height calculation values\n\tthis.targetRowHeight = params.targetRowHeight;\n\tthis.targetRowHeightTolerance = params.targetRowHeightTolerance;\n\tthis.minAspectRatio = this.width / params.targetRowHeight * (1 - params.targetRowHeightTolerance);\n\tthis.maxAspectRatio = this.width / params.targetRowHeight * (1 + params.targetRowHeightTolerance);\n\n\t// Edge case row height minimum/maximum\n\tthis.edgeCaseMinRowHeight = params.edgeCaseMinRowHeight;\n\tthis.edgeCaseMaxRowHeight = params.edgeCaseMaxRowHeight;\n\n\t// Widow layout direction\n\tthis.widowLayoutStyle = params.widowLayoutStyle;\n\n\t// Full width breakout rows\n\tthis.isBreakoutRow = params.isBreakoutRow;\n\n\t// Store layout data for each item in row\n\tthis.items = [];\n\n\t// Height remains at 0 until it's been calculated\n\tthis.height = 0;\n\n};\n\nRow.prototype = {\n\n\t/**\n\t * Attempt to add a single item to the row.\n\t * This is the heart of the justified algorithm.\n\t * This method is direction-agnostic; it deals only with sizes, not positions.\n\t *\n\t * If the item fits in the row, without pushing row height beyond min/max tolerance,\n\t * the item is added and the method returns true.\n\t *\n\t * If the item leaves row height too high, there may be room to scale it down and add another item.\n\t * In this case, the item is added and the method returns true, but the row is incomplete.\n\t *\n\t * If the item leaves row height too short, there are too many items to fit within tolerance.\n\t * The method will either accept or reject the new item, favoring the resulting row height closest to within tolerance.\n\t * If the item is rejected, left/right padding will be required to fit the row height within tolerance;\n\t * if the item is accepted, top/bottom cropping will be required to fit the row height within tolerance.\n\t *\n\t * @method addItem\n\t * @param itemData {Object} Item layout data, containing item aspect ratio.\n\t * @return {Boolean} True if successfully added; false if rejected.\n\t */\n\n\taddItem: function (itemData) {\n\n\t\tvar newItems = this.items.concat(itemData),\n\t\t\t// Calculate aspect ratios for items only; exclude spacing\n\t\t\trowWidthWithoutSpacing = this.width - (newItems.length - 1) * this.spacing,\n\t\t\tnewAspectRatio = newItems.reduce(function (sum, item) {\n\t\t\t\treturn sum + item.aspectRatio;\n\t\t\t}, 0),\n\t\t\ttargetAspectRatio = rowWidthWithoutSpacing / this.targetRowHeight,\n\t\t\tpreviousRowWidthWithoutSpacing,\n\t\t\tpreviousAspectRatio,\n\t\t\tpreviousTargetAspectRatio;\n\n\t\t// Handle big full-width breakout photos if we're doing them\n\t\tif (this.isBreakoutRow) {\n\t\t\t// Only do it if there's no other items in this row\n\t\t\tif (this.items.length === 0) {\n\t\t\t\t// Only go full width if this photo is a square or landscape\n\t\t\t\tif (itemData.aspectRatio >= 1) {\n\t\t\t\t\t// Close out the row with a full width photo\n\t\t\t\t\tthis.items.push(itemData);\n\t\t\t\t\tthis.completeLayout(rowWidthWithoutSpacing / itemData.aspectRatio, 'justify');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (newAspectRatio < this.minAspectRatio) {\n\n\t\t\t// New aspect ratio is too narrow / scaled row height is too tall.\n\t\t\t// Accept this item and leave row open for more items.\n\n\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\treturn true;\n\n\t\t} else if (newAspectRatio > this.maxAspectRatio) {\n\n\t\t\t// New aspect ratio is too wide / scaled row height will be too short.\n\t\t\t// Accept item if the resulting aspect ratio is closer to target than it would be without the item.\n\t\t\t// NOTE: Any row that falls into this block will require cropping/padding on individual items.\n\n\t\t\tif (this.items.length === 0) {\n\n\t\t\t\t// When there are no existing items, force acceptance of the new item and complete the layout.\n\t\t\t\t// This is the pano special case.\n\t\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\t\tthis.completeLayout(rowWidthWithoutSpacing / newAspectRatio, 'justify');\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// Calculate width/aspect ratio for row before adding new item\n\t\t\tpreviousRowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing;\n\t\t\tpreviousAspectRatio = this.items.reduce(function (sum, item) {\n\t\t\t\treturn sum + item.aspectRatio;\n\t\t\t}, 0);\n\t\t\tpreviousTargetAspectRatio = previousRowWidthWithoutSpacing / this.targetRowHeight;\n\n\t\t\tif (Math.abs(newAspectRatio - targetAspectRatio) > Math.abs(previousAspectRatio - previousTargetAspectRatio)) {\n\n\t\t\t\t// Row with new item is us farther away from target than row without; complete layout and reject item.\n\t\t\t\tthis.completeLayout(previousRowWidthWithoutSpacing / previousAspectRatio, 'justify');\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Row with new item is us closer to target than row without;\n\t\t\t\t// accept the new item and complete the row layout.\n\t\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\t\tthis.completeLayout(rowWidthWithoutSpacing / newAspectRatio, 'justify');\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// New aspect ratio / scaled row height is within tolerance;\n\t\t\t// accept the new item and complete the row layout.\n\t\t\tthis.items.push(Object.assign({}, itemData));\n\t\t\tthis.completeLayout(rowWidthWithoutSpacing / newAspectRatio, 'justify');\n\t\t\treturn true;\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Check if a row has completed its layout.\n\t *\n\t * @method isLayoutComplete\n\t * @return {Boolean} True if complete; false if not.\n\t */\n\n\tisLayoutComplete: function () {\n\t\treturn this.height > 0;\n\t},\n\n\t/**\n\t * Set row height and compute item geometry from that height.\n\t * Will justify items within the row unless instructed not to.\n\t *\n\t * @method completeLayout\n\t * @param newHeight {Number} Set row height to this value.\n\t * @param widowLayoutStyle {String} How should widows display? Supported: left | justify | center\n\t */\n\n\tcompleteLayout: function (newHeight, widowLayoutStyle) {\n\n\t\tvar itemWidthSum = this.left,\n\t\t\trowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing,\n\t\t\tclampedToNativeRatio,\n\t\t\tclampedHeight,\n\t\t\terrorWidthPerItem,\n\t\t\troundedCumulativeErrors,\n\t\t\tsingleItemGeometry,\n\t\t\tcenterOffset;\n\n\t\t// Justify unless explicitly specified otherwise.\n\t\tif (typeof widowLayoutStyle === 'undefined' || ['justify', 'center', 'left'].indexOf(widowLayoutStyle) < 0) {\n\t\t\twidowLayoutStyle = 'left';\n\t\t}\n\n\t\t// Clamp row height to edge case minimum/maximum.\n\t\tclampedHeight = Math.max(this.edgeCaseMinRowHeight, Math.min(newHeight, this.edgeCaseMaxRowHeight));\n\n\t\tif (newHeight !== clampedHeight) {\n\n\t\t\t// If row height was clamped, the resulting row/item aspect ratio will be off,\n\t\t\t// so force it to fit the width (recalculate aspectRatio to match clamped height).\n\t\t\t// NOTE: this will result in cropping/padding commensurate to the amount of clamping.\n\t\t\tthis.height = clampedHeight;\n\t\t\tclampedToNativeRatio = (rowWidthWithoutSpacing / clampedHeight) / (rowWidthWithoutSpacing / newHeight);\n\n\t\t} else {\n\n\t\t\t// If not clamped, leave ratio at 1.0.\n\t\t\tthis.height = newHeight;\n\t\t\tclampedToNativeRatio = 1.0;\n\n\t\t}\n\n\t\t// Compute item geometry based on newHeight.\n\t\tthis.items.forEach(function (item) {\n\n\t\t\titem.top = this.top;\n\t\t\titem.width = item.aspectRatio * this.height * clampedToNativeRatio;\n\t\t\titem.height = this.height;\n\n\t\t\t// Left-to-right.\n\t\t\t// TODO right to left\n\t\t\t// item.left = this.width - itemWidthSum - item.width;\n\t\t\titem.left = itemWidthSum;\n\n\t\t\t// Increment width.\n\t\t\titemWidthSum += item.width + this.spacing;\n\n\t\t}, this);\n\n\t\t// If specified, ensure items fill row and distribute error\n\t\t// caused by rounding width and height across all items.\n\t\tif (widowLayoutStyle === 'justify') {\n\n\t\t\titemWidthSum -= (this.spacing + this.left);\n\n\t\t\terrorWidthPerItem = (itemWidthSum - this.width) / this.items.length;\n\t\t\troundedCumulativeErrors = this.items.map(function (item, i) {\n\t\t\t\treturn Math.round((i + 1) * errorWidthPerItem);\n\t\t\t});\n\n\n\t\t\tif (this.items.length === 1) {\n\n\t\t\t\t// For rows with only one item, adjust item width to fill row.\n\t\t\t\tsingleItemGeometry = this.items[0];\n\t\t\t\tsingleItemGeometry.width -= Math.round(errorWidthPerItem);\n\n\t\t\t} else {\n\n\t\t\t\t// For rows with multiple items, adjust item width and shift items to fill the row,\n\t\t\t\t// while maintaining equal spacing between items in the row.\n\t\t\t\tthis.items.forEach(function (item, i) {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\titem.left -= roundedCumulativeErrors[i - 1];\n\t\t\t\t\t\titem.width -= (roundedCumulativeErrors[i] - roundedCumulativeErrors[i - 1]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\titem.width -= roundedCumulativeErrors[i];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t} else if (widowLayoutStyle === 'center') {\n\n\t\t\t// Center widows\n\t\t\tcenterOffset = (this.width - itemWidthSum) / 2;\n\n\t\t\tthis.items.forEach(function (item) {\n\t\t\t\titem.left += centerOffset + this.spacing;\n\t\t\t}, this);\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Force completion of row layout with current items.\n\t *\n\t * @method forceComplete\n\t * @param fitToWidth {Boolean} Stretch current items to fill the row width.\n\t *                             This will likely result in padding.\n\t * @param fitToWidth {Number}\n\t */\n\n\tforceComplete: function (fitToWidth, rowHeight) {\n\n\t\t// TODO Handle fitting to width\n\t\t// var rowWidthWithoutSpacing = this.width - (this.items.length - 1) * this.spacing,\n\t\t// \tcurrentAspectRatio = this.items.reduce(function (sum, item) {\n\t\t// \t\treturn sum + item.aspectRatio;\n\t\t// \t}, 0);\n\n\t\tif (typeof rowHeight === 'number') {\n\n\t\t\tthis.completeLayout(rowHeight, this.widowLayoutStyle);\n\n\t\t} else {\n\n\t\t\t// Complete using target row height.\n\t\t\tthis.completeLayout(this.targetRowHeight, this.widowLayoutStyle);\n\t\t}\n\n\t},\n\n\t/**\n\t * Return layout data for items within row.\n\t * Note: returns actual list, not a copy.\n\t *\n\t * @method getItems\n\t * @return Layout data for items within row.\n\t */\n\n\tgetItems: function () {\n\t\treturn this.items;\n\t}\n\n};\n"],"names":["JustifyLayout","props","layoutData","justifiedLayout","data","map","item","width","height","containerPadding","targetRowHeight","containerWidth","document","body","clientWidth","boxes","index","style","position","left","top","Item","Cats","useState","catList","setCatList","getOtherCats","myFetch","then","useEffect","type","onClick","id","src","url","preview","className","placeholder","background","alt","Component","Row","require","createNewRow","layoutConfig","isBreakoutRow","fullWidthBreakoutRowCadence","_rows","length","_containerHeight","right","spacing","boxSpacing","horizontal","targetRowHeightTolerance","edgeCaseMinRowHeight","edgeCaseMaxRowHeight","rightToLeft","widowLayoutStyle","addRow","row","push","_layoutItems","concat","getItems","vertical","items","module","exports","input","config","defaults","maxNumRows","Number","POSITIVE_INFINITY","forceAspectRatio","showWidows","Object","assign","isNaN","parseFloat","bottom","_awakeItems","_inViewportItems","_leadingOrphans","_trailingOrphans","_orphans","_widowCount","itemLayoutData","itemAdded","currentRow","nextToLastRowHeight","laidOutItems","forEach","itemData","forcedAspectRatio","aspectRatio","some","i","Error","addItem","isLayoutComplete","forceComplete","containerHeight","widowCount","computeLayout","params","this","minAspectRatio","maxAspectRatio","prototype","previousRowWidthWithoutSpacing","previousAspectRatio","previousTargetAspectRatio","newItems","rowWidthWithoutSpacing","newAspectRatio","reduce","sum","targetAspectRatio","completeLayout","Math","abs","newHeight","clampedToNativeRatio","clampedHeight","errorWidthPerItem","roundedCumulativeErrors","centerOffset","itemWidthSum","indexOf","max","min","round","fitToWidth","rowHeight"],"sourceRoot":""}